---
swagger: "2.0"
info:
  description: "A general-purpose logging API written in node.js, and based on log4js-node.\n\
    \nSupports all <a>log4js-node</a> functionality, extending it to include JSON\
    \ and XML output.\n<h2>Object Definitions</h2> <h3>Appenders</h3> <p>Write a simpler\
    \ description of log4js-node appenders</p> <h3>Categories</h3> <p>Write a simpler\
    \ description of log4js-node categories</p> <h3>Layouts</h3> <p>Write a simpler\
    \ description of log4js-node layouts.</p>\n<b>NOTE Explain how different appenders\
    \ can have different number of properties with examples (maybe link to log4js-node\
    \ documentation?)</b>"
  version: "1.0.0"
  title: "Logjack"
  contact:
    email: "devops@hubrix.co"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "logjack-sandbox.hubrix.io"
basePath: "/logjack/1.0.0"
schemes:
- "https"
paths:
  /configure:
    post:
      summary: "Accepts the configuration object to initialize the logger with desired\
        \ options (categories, appenders, etc.)"
      operationId: "configure"
      parameters:
      - in: "body"
        name: "configuration"
        description: "configuration object"
        required: false
        schema:
          $ref: "#/definitions/Config"
      responses:
        200:
          description: "logger configured successfully."
        400:
          description: "invalid input, configuration object invalid."
      x-swagger-router-controller: "Default"
  /log:
    post:
      summary: "Logs the message based on current configuration object."
      operationId: "log"
      parameters:
      - name: "message"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "config"
        description: "configuration object"
        required: true
        schema:
          $ref: "#/definitions/Config"
      responses:
        200:
          description: "message logged successfully"
        400:
          description: "invalid input, empty message"
        401:
          description: "invalid input, configuration object invalid"
      x-swagger-router-controller: "Default"
  /current_level/{appenderName}:
    get:
      summary: "Returns the current log level for an appender."
      operationId: "getCurrentLevel"
      parameters:
      - name: "appenderName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok."
        404:
          description: "invalid input, appenderName not found."
      x-swagger-router-controller: "Default"
  /current_level:
    post:
      summary: "Sets the current log level for an appender."
      operationId: "setCurrentLevel"
      parameters:
      - name: "level"
        in: "query"
        required: true
        type: "string"
      - name: "appenderName"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "config"
        description: "configuration object"
        required: true
        schema:
          $ref: "#/definitions/Config"
      responses:
        200:
          description: "Current level set successfully."
        400:
          description: "invalid input, level invalid."
        401:
          description: "invalid input, appenderName invalid."
        402:
          description: "invalid input, configuration object invalid."
      x-swagger-router-controller: "Default"
definitions:
  Config:
    type: "object"
    required:
    - "appenders"
    - "categories"
    properties:
      appenders:
        $ref: "#/definitions/Appenders"
      categories:
        $ref: "#/definitions/Categories"
    example:
      categories:
        default:
          appenders: "out,console"
          level: "error"
      appenders:
        out:
          type: "file"
          filename: "mylog.log"
  Appenders:
    type: "object"
    required:
    - "out"
    properties:
      out:
        $ref: "#/definitions/AppenderType"
    example:
      out:
        type: "file"
        filename: "mylog.log"
  AppenderType:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
      filename:
        type: "string"
      layout:
        $ref: "#/definitions/Layout"
    example:
      type: "file"
      filename: "mylog.log"
  Categories:
    type: "object"
    required:
    - "default"
    properties:
      default:
        $ref: "#/definitions/DefaultCategories"
    example:
      default:
        appenders: "out,console"
        level: "error"
  DefaultCategories:
    type: "object"
    required:
    - "appenders"
    - "level"
    properties:
      appenders:
        type: "array"
        items:
          type: "string"
      level:
        type: "string"
    example:
      appenders: "out,console"
      level: "error"
  Layout:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
    example:
      type: "colored"
